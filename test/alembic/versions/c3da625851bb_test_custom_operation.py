"""test custom operation

Revision ID: c3da625851bb
Revises:
Create Date: 2024-12-16 22:33:51.253629

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c3da625851bb"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.enable_rls("users")  # type: ignore
    op.create_policy(
        table_name="users",
        policy_name="users_equal_to_accountid_policy_select_policy_0",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.create_policy(
        table_name="users",
        policy_name="users_equal_to_accountid_policy_update_policy_0",
        cmd="UPDATE",
        definition="PERMISSIVE",
        expr="id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.create_table(
        "items",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_items_id"), "items", ["id"], unique=False)
    op.create_index(op.f("ix_items_title"), "items", ["title"], unique=False)
    op.enable_rls("items")  # type: ignore
    op.create_policy(
        table_name="items",
        policy_name="items_equal_to_accountid_policy_select_policy_0",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="owner_id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.create_policy(
        table_name="items",
        policy_name="items_equal_to_accountid_policy_update_policy_0",
        cmd="UPDATE",
        definition="PERMISSIVE",
        expr="owner_id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.create_policy(
        table_name="items",
        policy_name="items_greater_than_accountid_policy_select_policy_1",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="owner_id > CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.create_policy(
        table_name="items",
        policy_name="items_smaller_than_or_equal_accountid_policy_all_policy_2",
        cmd="ALL",
        definition="PERMISSIVE",
        expr="owner_id <= CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_policy(
        table_name="items",
        policy_name="items_smaller_than_or_equal_accountid_policy_all_policy_2",
        cmd="ALL",
        definition="PERMISSIVE",
        expr="owner_id <= CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.drop_policy(
        table_name="items",
        policy_name="items_greater_than_accountid_policy_select_policy_1",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="owner_id > CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.drop_policy(
        table_name="items",
        policy_name="items_equal_to_accountid_policy_update_policy_0",
        cmd="UPDATE",
        definition="PERMISSIVE",
        expr="owner_id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.drop_policy(
        table_name="items",
        policy_name="items_equal_to_accountid_policy_select_policy_0",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="owner_id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.disable_rls("items")  # type: ignore
    op.drop_index(op.f("ix_items_title"), table_name="items")
    op.drop_index(op.f("ix_items_id"), table_name="items")
    op.drop_table("items")
    op.drop_policy(
        table_name="users",
        policy_name="users_equal_to_accountid_policy_update_policy_0",
        cmd="UPDATE",
        definition="PERMISSIVE",
        expr="id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.drop_policy(
        table_name="users",
        policy_name="users_equal_to_accountid_policy_select_policy_0",
        cmd="SELECT",
        definition="PERMISSIVE",
        expr="id = CAST(coalesce(current_setting('rls.account_id'), '') AS INTEGER)",
    )  # type: ignore
    op.disable_rls("users")  # type: ignore
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
